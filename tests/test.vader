Given (Nested brackets):
  ([
    { 1
      [ 2 ]
    }
    3 [   ]
  ])
  123456789

Execute (Move to 1, then go to previous '['):
  execute '/1'
  normal f1
  normal [[
  AssertEqual 1, line('.')
  AssertEqual 2, col('.')

Execute (Move to 1, then go to next ']'):
  execute '/1'
  normal f1
  normal ]]
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

Execute (Move to 2, then go to previous '['):
  execute '/2'
  normal f2
  normal [[
  AssertEqual 3, line('.')
  AssertEqual 5, col('.')

Execute (Move to 2, then go to next ']'):
  execute '/2'
  normal f2
  normal ]]
  AssertEqual 3, line('.')
  AssertEqual 9, col('.')

Execute (Move to 3, then go to previous '['):
  execute '/3'
  normal f3
  normal [[
  AssertEqual 1, line('.')
  AssertEqual 2, col('.')

Execute (Move to 3, then go to next ']'):
  execute '/3'
  normal f3
  normal ]]
  AssertEqual 6, line('.')
  AssertEqual 1, col('.')

Given (Brackets on one line):
  [ [ 1 [ 2 ] ] 3 [ ] ]
  123456789012345678901

Execute (Move to 1, then go to previous '['):
  normal f1
  normal [[
  AssertEqual 3, col('.')

Execute (Move to 1, then go to next ']'):
  normal f1
  normal ]]
  AssertEqual 13, col('.')

Execute (Move to 2, then go to previous '['):
  normal f2
  normal [[
  AssertEqual 7, col('.')

Execute (Move to 2, then go to next ']'):
  normal f2
  normal ]]
  AssertEqual 11, col('.')

Execute (Move to 3, then go to previous '['):
  normal f3
  normal [[
  AssertEqual 1, col('.')

Execute (Move to 3, then go to next ']'):
  normal f3
  normal ]]
  AssertEqual 21, col('.')
